require('dotenv').config();
const express = require('express');
const session = require('express-session');
const crypto = require('crypto');
const path = require('fs');
const TelegramBot = require('node-telegram-bot-api');
const app = express();
const port = process.env.PORT || 3000;

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Express ---
const __dirname = path.resolve();
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.use(express.static(path.join(__dirname, 'public')));

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–π
const SESSION_SECRET = process.env.SESSION_SECRET || crypto.randomBytes(32).toString('hex');
app.use(session({
  secret: SESSION_SECRET,
  resave: false,
  saveUninitialized: true,
  cookie: { 
    secure: process.env.NODE_ENV === 'production',
    maxAge: 24 * 60 * 60 * 1000
  }
}));

// --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ) ---
const tokensStorage = new Map();

// --- Telegram Bot ---
const bot = new TelegramBot(process.env.BOT_TOKEN, {polling: true});

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;
  
  try {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    const token = crypto.randomBytes(20).toString('hex');
    tokensStorage.set(token, { username, chatId });
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    setTimeout(() => {
      if (tokensStorage.has(token)) tokensStorage.delete(token);
    }, 600000);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const loginLink = `${process.env.SERVER_URL}/login?token=${token}`;
    bot.sendMessage(chatId, `üîë –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: ${loginLink}\n\n–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 10 –º–∏–Ω—É—Ç`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// --- –ú–∞—Ä—à—Ä—É—Ç—ã Express ---

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.render('index');
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
app.get('/login', (req, res) => {
  const { token } = req.query;
  
  if (token && tokensStorage.has(token)) {
    const userData = tokensStorage.get(token);
    tokensStorage.delete(token);
    
    req.session.authenticated = true;
    req.session.username = userData.username;
    return res.redirect('/profile');
  }
  
  res.status(401).render('error', { message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω' });
});

// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/profile', (req, res) => {
  if (req.session.authenticated) {
    return res.render('profile', { 
      username: req.session.username 
    });
  }
  res.redirect('/');
});

// –í—ã—Ö–æ–¥
app.get('/logout', (req, res) => {
  req.session.destroy(err => {
    res.redirect('/');
  });
});

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∏ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`–†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
  
  // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è views:', path.join(__dirname, 'views'));
  console.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è public:', path.join(__dirname, 'public'));
});
