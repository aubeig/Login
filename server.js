import dotenv from 'dotenv';
dotenv.config();

import express from 'express';
import session from 'express-session';
import crypto from 'crypto';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs';
import TelegramBot from 'node-telegram-bot-api';
import { Pool } from 'pg';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const port = process.env.PORT || 3000;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
(async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS auth_tokens (
        token TEXT PRIMARY KEY,
        username TEXT NOT NULL,
        chat_id BIGINT NOT NULL,
        created_at TIMESTAMP DEFAULT NOW()
      );
    `);
    console.log('Auth tokens table created or exists');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    await pool.query(`
      CREATE OR REPLACE FUNCTION delete_old_tokens()
      RETURNS TRIGGER AS $$
      BEGIN
        DELETE FROM auth_tokens WHERE created_at < NOW() - INTERVAL '10 minutes';
        RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;

      DROP TRIGGER IF EXISTS tokens_cleanup_trigger ON auth_tokens;
      CREATE TRIGGER tokens_cleanup_trigger
      AFTER INSERT ON auth_tokens
      EXECUTE FUNCTION delete_old_tokens();
    `);
    console.log('Created automatic token cleanup trigger');
  } catch (err) {
    console.error('Error setting up database:', err);
  }
})();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(session({
  secret: process.env.SESSION_SECRET || crypto.randomBytes(32).toString('hex'),
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    maxAge: 7 * 24 * 60 * 60 * 1000 // 1 –Ω–µ–¥–µ–ª—è
  }
}));

app.set('view engine', 'ejs');
app.set('views', join(__dirname, 'views'));
app.use(express.static(join(__dirname, 'public')));

// Telegram Bot
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || 'user';
  
  try {
    const token = crypto.randomBytes(20).toString('hex');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ PostgreSQL
    await pool.query(
      'INSERT INTO auth_tokens (token, username, chat_id) VALUES ($1, $2, $3)',
      [token, username, chatId]
    );
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    let baseUrl = process.env.SERVER_URL;
    if (!baseUrl.endsWith('/')) baseUrl += '/';
    const loginLink = `${baseUrl}login?token=${token}`;
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.sendMessage(chatId, `
üîë <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞</b>

‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:
${loginLink}

‚åõ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 10 –º–∏–Ω—É—Ç
    `, { parse_mode: 'HTML' });
    
    console.log(`Token generated for @${username}: ${token}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    bot.sendMessage(chatId, '‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', { parse_mode: 'HTML' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
  res.render('index', { 
    botUsername: process.env.BOT_USERNAME,
    session: req.session 
  });
});

app.get('/login', async (req, res) => {
  let { token } = req.query;
  
  if (!token) {
    return res.status(401).render('error', { 
      message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
      session: req.session 
    });
  }
  
  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
  token = decodeURIComponent(token);
  console.log(`Login attempt with token: ${token}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const result = await pool.query(
      `DELETE FROM auth_tokens 
       WHERE token = $1 
       AND created_at > NOW() - INTERVAL '10 minutes'
       RETURNING username, chat_id`,
      [token]
    );
    
    if (result.rows.length === 0) {
      console.log('Invalid or expired token');
      return res.status(401).render('error', { 
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω',
        session: req.session 
      });
    }
    
    const userData = result.rows[0];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    req.session.authenticated = true;
    req.session.username = userData.username;
    
    console.log(`User authenticated: @${userData.username}`);
    
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
    return res.redirect('/profile');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    res.status(500).render('error', { 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      session: req.session 
    });
  }
});

app.get('/profile', (req, res) => {
  if (req.session.authenticated) {
    return res.render('profile', { 
      username: req.session.username,
      session: req.session 
    });
  }
  res.redirect('/');
});

app.get('/logout', (req, res) => {
  req.session.destroy(err => {
    res.redirect('/');
  });
});

// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
app.get('/debug-tokens', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM auth_tokens');
    res.json({
      count: result.rows.length,
      tokens: result.rows
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.listen(port, async () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`–†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
  console.log(`SERVER_URL: ${process.env.SERVER_URL}`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
  try {
    await pool.query('SELECT NOW()');
    console.log('PostgreSQL connected successfully');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–∫–µ–Ω–æ–≤
    const tableCheck = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'auth_tokens'
      )
    `);
    console.log('Auth tokens table exists:', tableCheck.rows[0].exists);
  } catch (err) {
    console.error('PostgreSQL connection error:', err);
  }
});
